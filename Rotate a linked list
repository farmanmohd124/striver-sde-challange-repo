
tc = o(n)
sc = o(1)

/**
 * Definition for singly-linked list.
 * class Node {
 * public:
 *     int data;
 *     Node *next;
 *     Node() : data(0), next(nullptr) {}
 *     Node(int x) : data(x), next(nullptr) {}
 *     Node(int x, Node *next) : data(x), next(next) {}
 * };
 */

Node *rotate(Node *head, int k) {

        if (head == nullptr || head->next == nullptr || k <= 0) {
        return head; // Nothing to rotate
    }

    int length = 1;
    Node* tail = head;

    // Find the length of the list and locate the tail node
    while (tail->next) {
        length++;
        tail = tail->next;
    }

    k = k % length; // Adjust k to handle cases where k > length

    if (k == 0) {
        return head; // No rotation needed
    }

    int stepsToNewHead = length - k - 1;
    Node* newHead = head;

    // Find the new head after rotation
    for (int i = 0; i < stepsToNewHead; i++) {
        newHead = newHead->next;
    }

    // Rotate the list
    tail->next = head;
    head = newHead->next;
    newHead->next = nullptr;

    return head;
}
